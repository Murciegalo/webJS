Globally install JUST npm & nodejs from repository

*Installing node.js from repository (best way so I can update regularly when using command apt)
wget -qO- https://deb.nodesource.com/setup_10.x | sudo -E bash -

*Installing last -v from nodeJS & npm
Run `sudo apt-get install -y nodejs` to install Node.js 10.x and npm


TO CHECK GLOBALLY installed packages I got:
npm list --global --depth=0
TO CHECK LOCALLY:
npm list --depth=0     


-------------INTALLING REQUIRED DEPENDENCIES(LOCALLY) BASED ON CURRENT PROJECT REQUIREMENTS----------- LOCALLY INSTALL NPM & NODE.JS + DEPENDENCIES

*Steps:		1. npm init 
		2. configure package.json


	 	Using Package.JSON  	[DEFINES MY DEPENDENCIES SO THAT I CAN SEND MY PROJECT TO MY COLLEAGUES]    *package-lock.json [it will LOCK dependencies/modules' versions I am using in the project]

		Package.JSON >>>>	File USE TO LIST DEPENDENCIES I will work with in my application  >>>> TO CREATE THIS FILE >>>>> NPM INIT / TERMINAL with nano/vim....
	
				1.	Dependencies >>>> "name": 	"dependency/package name",
							> "version": 	"package version"
																    
				2.  	I can go to package.json > and write the module I want to have in my application  >>>>>>>>>>>>> "tap": "*"   //install latest not breakable version
					Then I go back to terminal and run just: npm install (last version of tap will be install after
					npm checks depency in package.json file.

				TO CHECK DEPENDENCIES/MODULES INSTALLED >>>>I CAN JUST >>>> ls node_modules 


* npm search packagename

-------------------------------------------------AND THIS IS HOW I INSTALL NPM PACKAGES LOCALLY---------------------------------------------------------------------------------------------

SASS BEING INSTALLED LOCALLY 

npm init 
configure package.json


RIGHT AFTER >>>>>>>>>>>>>>>>>>>FIRST CHECK TO SEE IF EVERYTHING WENT WELL >>>>>>>>>> npm install


SASS & GULP DEPENDENCIES:		npm install node-sass gulp-sass --save-dev	&& npm install gulp		On Gulpfile.js:
																			2. var gulp = require('gulp'); 
																			//NOW TASKS TO BE ADDED
																			

GULP TASKS TO BE ACCOMMODATED:

- AUTOPREFIXER:				1. npm install --save-dev gulp-autoprefixer									2. autoprefixer = require('gulp-autoprefixer');
												     and now I got require... I may implement the TASK: 3. gulp.task('default', () =>
																			    gulp.src('src/app.css')
																				.pipe(autoprefixer({
																				    browsers: ['last 2 versions'],
																				    cascade: false
																				}))
																				.pipe(gulp.dest('dist'))
																				);


----------------------------------------------------------------------------------------------
- SASS					1. npm install --save-dev sass 									//SASS TASK
																	2. sass = require('gulp-sass');
																	3. gulp.task('sass', () => {
																	    gulp.src('scss/**/*.scss')
																			      //not a compressed version    if error, show me
																		 .pipe(sass({outputStyle: 'expanded'}).on('error', sass.logError))
																	//Once you compile scss into css , apply autoprefixer on them versions
																		 .pipe(autoprefixer('last 2 versions', 'safari 5', 'ie 7-9'))
																		 .pipe(gulp.dest('./dist/'))
																	});

------------------------------------------------------------------------------------------------
---------------------------WHEN SASS AND GULP ARE SET IN PROJECT , I WILL NEED A WATCH() to take care of changes JIT.

				1. browsersync.io/docs
				2. First, you'll need to install Browsersync & Gulp as development dependencies.
		
					npm install browser-sync //gulp --save-dev
				
				3. Then, use them within your gulpfile.js:
					
					browserSync = require('browser-sync').create();

					//WATCH FOR ME MATE , PLEASE
						gulp.task('watch', () => {
						  browserSync.init({
							server: {
							    baseDir: "./"
							},
							notify: false
						    });
							//run it if anything changes
						   gulp.watch('scss/**/*.scss', ['sass']) //I'll work here
						      // After you detect & update changes on *.scss files, please update browser and CSS files (read-only browsers)
						   gulp.watch(['**/*.html' , 'dist/*.css']).on('change' , browserSync.reload);
						});

OPTIONAL (EXAMPLE)
- LODASH

					1. npm install lodash --save >>>>	My package.json will now contain its first dependency>>>>> "dependencies":{
																		"lodash": "^2.4.1" 
																			}

/////////////////////////////////////////////////	WEBPACK TO BE INSTALLED ALONG WITH NPM & GULP		///////////////////////////////////////////////////////////////////////

Based on documentation/ reviews and personal convictions , I will only implement Webpack to deal with react/angular and babel stuff so far.


- WEBPACK				1. npm install webpack 

					2. webpack.config.js 
					
					3. on config file:
							entry point/output for JS (Basics)
					4. Automate this task 
							- package.json:
									const path = require('path');

									module.exports = {
									  entry: './assets/app/app.js',
									  output: {
									    path: path.resolve(__dirname, 'dist'),
									    filename: 'bundle.js'
									  }
									};




---------------------------------------------------FIRST OWN PACKAGE FOR FRONT END DEVELOPMENT, (REACT & REDUX TO BE ADDED)--------------------------------------------------------------------------




																		
